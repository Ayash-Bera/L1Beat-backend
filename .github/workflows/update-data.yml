name: Update Chain Data

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:         # Manual trigger

permissions:
  issues: write
  contents: read

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Test Connection
        run: |
          echo "Testing API connection..."
          response=$(curl -s \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            "https://backend-phi-green.vercel.app/api/test")
          echo "Test response: $response"
          if ! echo "$response" | jq -e '.success == true' >/dev/null; then
            echo "API test failed"
            exit 1
          fi

      - name: Update All Data
        id: update
        run: |
          echo "Attempting first update..."
          response=$(curl -s -X POST \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://backend-phi-green.vercel.app/api/update/batch")
          
          if echo "$response" | jq -e '.success == true' >/dev/null; then
            echo "Update process started successfully"
            # Wait for a bit to allow background processing
            echo "Waiting for 30 seconds to allow processing..."
            sleep 30
          else
            echo "Update initiation failed: $response"
            exit 1
          fi
          
          # Check the health endpoint to verify the update
          health_response=$(curl -s \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            "https://backend-phi-green.vercel.app/api/health")
            
          if echo "$health_response" | jq -e '.success == true' >/dev/null; then
            echo "Health check passed"
          else
            echo "Health check failed: $health_response"
            exit 1
          fi

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Data Update Failed',
              body: `Update job failed at ${new Date().toISOString()}\nPlease check the GitHub Actions logs.`
            })