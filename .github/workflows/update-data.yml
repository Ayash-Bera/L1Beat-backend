name: Update Chain Data

on:
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:         # Manual trigger

permissions:
  issues: write
  contents: read

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      API_BASE_URL: https://backend-phi-green.vercel.app/api
    
    steps:
      - name: Test Connection
        run: |
          echo "Testing API connection..."
          response=$(curl -s -X GET \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            "${{ env.API_BASE_URL }}/test")
          
          echo "Response status: $(echo $response | jq -r '.success')"
          
          if [ "$(echo $response | jq -r '.success')" != "true" ]; then
            echo "API test failed"
            exit 1
          fi

      - name: Trigger Update
        if: success()
        run: |
          echo "Triggering batch update..."
          response=$(curl -s -X POST \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            -H "Content-Type: application/json" \
            "${{ env.API_BASE_URL }}/update/batch")
          
          if [ "$(echo $response | jq -r '.success')" != "true" ]; then
            echo "Update trigger failed"
            exit 1
          fi
          
          echo "Update process started. Waiting 45 seconds..."
          sleep 45

      - name: Verify Update
        if: success()
        run: |
          echo "Checking health status..."
          response=$(curl -s -X GET \
            -H "x-api-key: ${{ secrets.UPDATE_API_KEY }}" \
            "${{ env.API_BASE_URL }}/health")
          
          if [ "$(echo $response | jq -r '.success')" != "true" ]; then
            echo "Health check failed"
            echo "Response: $response"
            exit 1
          fi
          
          echo "Health check passed"
          echo "Total chains: $(echo $response | jq -r '.metrics.totalChains')"
          echo "Stale chains: $(echo $response | jq -r '.metrics.staleChains')"

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = `
            Data update job failed at ${new Date().toISOString()}
            
            Please check the GitHub Actions logs for more details:
            ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Data Update Failed',
              body: issueBody,
              labels: ['bug', 'automated']
            });